service: projectManagementApp
frameworkVersion: '2'
plugins: 
  - serverless-esbuild
  - serverless-iam-roles-per-function
provider:
  tracing:
    lambda: true
    apiGateway: true
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-central-1
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000'
    WORKORDER_TABLE: Workorder-serverless-${self:provider.stage}
    ATTACHMENT_S3_BUCKET: projectmanagement-images-${self:provider.stage}-111640569621
    SIGNED_URL_EXPIRATION: 300
  lambdaHashingVersion: '20201221'

package:
  individually: true

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - aws-sdk
    target: node12
    define:
      'require.resolve': undefined
    platform: node
    concurrency: 10

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  createWorkorder:
    handler: src/lambda/http/CreateWorkorder.handler
    events:
      - http:
          method: post
          path: createworkorder
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-workorder-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WORKORDER_TABLE}
  
  getWorkorder:
    handler: src/lambda/http/GetWorkorders.handler
    events:
      - http:
          method: get
          path: workorder
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WORKORDER_TABLE}

  getSpecificWorkorder:
    handler: src/lambda/http/GetWorkorder.handler
    events:
      - http:
          method: get
          path: workorder/{woId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WORKORDER_TABLE}

  deleteWorkorder:
    handler: src/lambda/http/DeleteWorkorder.handler
    events:
      - http:
          method: delete
          path: workorder/{woId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WORKORDER_TABLE}

  updateWorkorder:
    handler: src/lambda/http/UpdateWorkorder.handler
    events:
      - http:
          method: patch
          path: workorder/{woId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/update-workorder-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:DeleteItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WORKORDER_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: workorder/{woId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    WorkOrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: assignedTo
            AttributeType: S
          - AttributeName: woId
            AttributeType: S
        KeySchema:
          - AttributeName: assignedTo
            KeyType: HASH
          - AttributeName: woId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.WORKORDER_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyS3Policy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket